parent.0        = @ec.simple.SimpleDefaults simple.params
#overwrite inappropriate parameters
pop.subpop.0.size = 100
generations = 200
#Define the Representation -- And All About Species
pop.subpop.0.species		= ec.vector.IntegerVectorSpecies
pop.subpop.0.species.ind	= ec.vector.IntegerVectorIndividual
pop.subpop.0.species.fitness = ec.simple.SimpleFitness
pop.subpop.0.species		= ec.vector.IntegerVectorSpecies
pop.subpop.0.species.ind	= ec.vector.IntegerVectorIndividual
pop.subpop.0.species.fitness = ec.simple.SimpleFitness
# Note that min-gene and max-gene are defined in the SPECIES, not in the INDIVIDUAL
pop.subpop.0.species.min-gene	= -12312
pop.subpop.0.species.max-gene 	= 2341212
#specify the chunk size -- it'll by default be set to 1 for us
#genome consists of 20 integers
#two-point crossover (so crossover-prob doesn't really matter)
#and we'll mutate with a gene-independent probability of 0.05.
pop.subpop.0.species.genome-size	= 20
pop.subpop.0.species.crossover-type	= two
pop.subpop.0.species.mutation-type      = reset
pop.subpop.0.species.mutation-prob	= 0.05
#Specify the Breeding Pipeline
#pipeline will pick two parents
#one by fitness proportionate selection
#and one through a tournament selection (of size 5) which always returns the worst individual in the tournament
# Use our own custom mutation class
pop.subpop.0.species.pipe = ec.app.tutorial2.OurMutatorPipeline
pop.subpop.0.species.pipe.source.0	= ec.vector.breed.VectorCrossoverPipeline
# Toss the second child
pop.subpop.0.species.pipe.source.0.toss = true
pop.subpop.0.species.pipe.source.0.source.0 = ec.select.FitProportionateSelection
pop.subpop.0.species.pipe.source.0.source.1 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1.size = 5
# Pick the worst individual in the tournament
pop.subpop.0.species.pipe.source.0.source.1.pick-worst = true
eval.problem            = ec.app.tutorial2.AddSubtract
